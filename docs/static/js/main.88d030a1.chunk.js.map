{"version":3,"sources":["storage/reminders.js","ui/ColorInput/index.jsx","ui/TextInput/index.jsx","components/Reminder/EditReminder.jsx","components/Reminder/NewReminder.jsx","components/Reminder/reminderValidations.js","components/Calendar/components/CalendarHeader/index.jsx","components/Calendar/components/CalendarBody/components/CalendarDay/index.jsx","api/index.js","ui/Loading/index.jsx","components/ReminderLabel/index.jsx","components/Calendar/components/CalendarBody/index.jsx","components/Calendar/index.jsx","components/Calendar/Calendar.js","App.jsx","index.jsx"],"names":["STORAGE_KEY","ColorInput","value","onSelect","className","onClick","TextInput","label","name","onChange","maxLength","placeholder","errorMessage","useState","remainingCharacters","setRemainingCharacters","useEffect","length","htmlFor","data-testid","type","id","event","target","defaultProps","EditReminder","initialDescription","description","initialDate","date","initialTime","time","initialCity","city","initialTheme","theme","closeDialog","setDescription","moment","format","setDate","setTime","setCity","setTheme","reminder","storageValue","localStorage","getItem","remindersArray","JSON","parse","filter","item","setItem","stringify","saveChangesToReminderLocalStorage","window","location","reload","deleteReminderFromLocalStorage","deleteAllRemindersFromDate","NewReminder","errorDescription","setErrorDescription","errorDate","setErrorDate","errorTime","setErrorTime","canSaveNewReminder","errorsCount","isValid","timeIsValid","push","saveNewReminderToLocalStorage","Date","now","toString","CalendarHeader","currentMonth","currentYear","handleMonthChange","isOpen","setIsOpen","toggleDialog","current","CalendarDay","day","isToday","isSelected","isWeekend","isNotCurrentMonth","children","classNames","join","API_KEY","Loading","ReminderLabel","weather","setWeather","loading","setLoading","a","url","axios","get","response","data","console","error","message","getWeatherInfo","stopPropagation","CalendarBody","dates","selectedDay","reminders","setReminders","sorting","b","storageInfo","map","week","key","index","isSame","sort","Calendar","setSelectedDay","calendar","setCalendar","selectedDate","firstDay","clone","startOf","lastDay","endOf","subtract","isBefore","Array","fill","add","mountCalendar","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.88d030a1.chunk.js","sourcesContent":["const STORAGE_KEY = 'CalendarChallenge_Reminders'\n\nexport const loadRemindersFromLocalStorage = () => {\n  const storageValue = localStorage.getItem(STORAGE_KEY)\n\n  return storageValue\n}\n\nexport const saveNewReminderToLocalStorage = value => {\n  const storageValue = localStorage.getItem(STORAGE_KEY)\n  const remindersArray = storageValue ? JSON.parse(storageValue) : []\n  remindersArray.push(value)\n\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(remindersArray))\n}\n\nexport const deleteReminderFromLocalStorage = id => {\n  const storageValue = localStorage.getItem(STORAGE_KEY)\n  const remindersArray = JSON.parse(storageValue).filter(item => item.id !== id)\n\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(remindersArray))\n}\n\nexport const deleteAllRemindersFromDate = date => {\n  const storageValue = localStorage.getItem(STORAGE_KEY)\n  const remindersArray = JSON.parse(storageValue).filter(\n    item => item.date !== date\n  )\n\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(remindersArray))\n}\n\nexport const saveChangesToReminderLocalStorage = reminder => {\n  const storageValue = localStorage.getItem(STORAGE_KEY)\n  const remindersArray = JSON.parse(storageValue).filter(\n    item => item.id !== reminder.id\n  )\n\n  localStorage.setItem(\n    STORAGE_KEY,\n    JSON.stringify([...remindersArray, reminder])\n  )\n}\n","import React from 'react'\nimport { func, string } from 'prop-types'\n\nimport './styles.css'\n\nfunction ColorInput({ value, onSelect }) {\n  return (\n    <div className=\"input--color\">\n      <label className=\"input-color__label\">Badge color</label>\n      <ul>\n        <li>\n          <button\n            onClick={() => onSelect('blue')}\n            className={`input-color__button blue ${\n              value === 'blue' ? 'is-selected' : ''\n            }`}\n          >\n            Blue\n          </button>\n        </li>\n        <li>\n          <button\n            onClick={() => onSelect('green')}\n            className={`input-color__button green ${\n              value === 'green' ? 'is-selected' : ''\n            }`}\n          >\n            Green\n          </button>\n        </li>\n        <li>\n          <button\n            onClick={() => onSelect('grey')}\n            className={`input-color__button grey ${\n              value === 'grey' ? 'is-selected' : ''\n            }`}\n          >\n            Grey\n          </button>\n        </li>\n        <li>\n          <button\n            onClick={() => onSelect('purple')}\n            className={`input-color__button purple ${\n              value === 'purple' ? 'is-selected' : ''\n            }`}\n          >\n            Purple\n          </button>\n        </li>\n        <li>\n          <button\n            onClick={() => onSelect('red')}\n            className={`input-color__button red ${\n              value === 'red' ? 'is-selected' : ''\n            }`}\n          >\n            Red\n          </button>\n        </li>\n        <li>\n          <button\n            onClick={() => onSelect('yellow')}\n            className={`input-color__button yellow ${\n              value === 'yellow' ? 'is-selected' : ''\n            }`}\n          >\n            Yellow\n          </button>\n        </li>\n      </ul>\n    </div>\n  )\n}\n\nColorInput.propTypes = {\n  value: string.isRequired,\n  onSelect: func.isRequired\n}\n\nexport default ColorInput\n","import React, { useState, useEffect } from 'react'\nimport { string, number, func } from 'prop-types'\n\nimport './styles.css'\n\nfunction TextInput({\n  label,\n  name,\n  value,\n  onChange,\n  maxLength,\n  placeholder,\n  errorMessage\n}) {\n  const [remainingCharacters, setRemainingCharacters] = useState(maxLength || 0)\n\n  useEffect(() => {\n    if (maxLength && value) {\n      setRemainingCharacters(maxLength - value.length)\n    } else if (maxLength) {\n      setRemainingCharacters(maxLength)\n    }\n  }, [value, maxLength])\n\n  function onChangeText(event) {\n    onChange(event.target.value)\n  }\n\n  return (\n    <div className=\"input--text\">\n      <div className=\"input-text__labels\">\n        <label htmlFor={name}>{label}</label>\n        {maxLength ? (\n          <span\n            data-testid=\"RemainingCharactersCount\"\n            className=\"input-text__remaining-chars\"\n          >\n            {remainingCharacters}\n          </span>\n        ) : null}\n      </div>\n      <input\n        type=\"text\"\n        id={name}\n        value={value}\n        maxLength={maxLength && maxLength}\n        onChange={onChangeText}\n        placeholder={placeholder}\n      />\n      {errorMessage && <p className=\"input-text__error\">{errorMessage}</p>}\n    </div>\n  )\n}\n\nTextInput.propTypes = {\n  label: string,\n  name: string.isRequired,\n  value: string.isRequired,\n  onChange: func.isRequired,\n  maxLength: number,\n  placeholder: string,\n  errorMessage: string\n}\n\nTextInput.defaultProps = {\n  label: '',\n  maxLength: 0,\n  placeholder: '',\n  errorMessage: ''\n}\n\nexport default TextInput\n","import React, { useState } from 'react'\nimport { string, func } from 'prop-types'\nimport moment from 'moment'\n\nimport {\n  saveChangesToReminderLocalStorage,\n  deleteReminderFromLocalStorage,\n  deleteAllRemindersFromDate\n} from 'storage/reminders'\n\nimport ColorInput from 'ui/ColorInput'\nimport TextInput from 'ui/TextInput'\n\nfunction EditReminder({\n  id,\n  description: initialDescription,\n  date: initialDate,\n  time: initialTime,\n  city: initialCity,\n  theme: initialTheme,\n  closeDialog\n}) {\n  const [description, setDescription] = useState(initialDescription)\n  const [date, setDate] = useState(\n    moment(initialDate, 'YYYY-MM-DD').format('MM/DD/YYYY')\n  )\n  const [time, setTime] = useState(initialTime)\n  const [city, setCity] = useState(initialCity)\n  const [theme, setTheme] = useState(initialTheme)\n\n  function deleteReminder() {\n    deleteReminderFromLocalStorage(id)\n    closeDialog()\n    window.location.reload(false)\n  }\n\n  function deleteAllReminders() {\n    deleteAllRemindersFromDate(initialDate)\n    closeDialog()\n    window.location.reload(false)\n  }\n\n  function saveChanges() {\n    const item = {\n      id: id,\n      description: description,\n      date: moment(date, 'MM-DD-YYYY').format('YYYY-MM-DD'),\n      time: moment(time, 'HH:mm').format('HH:mm'),\n      theme: theme,\n      city: city\n    }\n\n    saveChangesToReminderLocalStorage(item)\n    closeDialog()\n    window.location.reload(false)\n  }\n\n  return (\n    <>\n      <div className=\"reminder__overlay\"></div>\n      <div className=\"reminder__lightbox\">\n        <header>\n          <h3 className=\"reminder-lightbox__title\">Edit reminder</h3>\n          <button\n            onClick={closeDialog}\n            className=\"reminder-lightbox__close-button\"\n          >\n            Close\n          </button>\n        </header>\n        <TextInput\n          name=\"reminder-description\"\n          label=\"Description\"\n          value={description}\n          onChange={setDescription}\n          maxLength={30}\n        />\n\n        <div className=\"reminder-lightbox__datetime-fields\">\n          <TextInput\n            name=\"reminder-time\"\n            label=\"Time\"\n            placeholder=\"Ex.: 21:00\"\n            value={time}\n            onChange={setTime}\n            maxLength={5}\n          />\n          <TextInput\n            name=\"reminder-day\"\n            label=\"Day\"\n            placeholder=\"Ex.: 12/31/2020\"\n            value={date}\n            onChange={setDate}\n            maxLength={10}\n          />\n        </div>\n\n        <TextInput\n          name=\"reminder-city\"\n          label=\"City\"\n          value={city}\n          onChange={setCity}\n          maxLength={30}\n        />\n        <ColorInput value={theme} onSelect={setTheme} />\n\n        <div className=\"reminder-lightbox__buttons-list\">\n          <button\n            className=\"reminder-lightbox__primary-button\"\n            onClick={saveChanges}\n          >\n            Save changes\n          </button>\n          <button\n            className=\"reminder-lightbox__delete-button\"\n            onClick={deleteReminder}\n          >\n            Delete reminder\n          </button>\n          <button\n            className=\"reminder-lightbox__delete-all-button\"\n            onClick={deleteAllReminders}\n          >\n            Delete all reminders from today\n          </button>\n        </div>\n      </div>\n    </>\n  )\n}\n\nEditReminder.propTypes = {\n  id: string.isRequired,\n  description: string.isRequired,\n  date: string.isRequired,\n  time: string.isRequired,\n  city: string.isRequired,\n  theme: string.isRequired,\n  closeDialog: func.isRequired\n}\n\nexport default EditReminder\n","import React, { useState } from 'react'\nimport { func } from 'prop-types'\nimport moment from 'moment'\n\nimport { saveNewReminderToLocalStorage } from 'storage/reminders'\nimport { dateIsValid, timeIsValid } from './reminderValidations'\n\nimport ColorInput from 'ui/ColorInput'\nimport TextInput from 'ui/TextInput'\n\nimport './styles.css'\n\nfunction NewReminder({ closeDialog }) {\n  const [description, setDescription] = useState('')\n  const [errorDescription, setErrorDescription] = useState('')\n  const [date, setDate] = useState('')\n  const [errorDate, setErrorDate] = useState('')\n  const [time, setTime] = useState('')\n  const [errorTime, setErrorTime] = useState('')\n  const [city, setCity] = useState('')\n  const [theme, setTheme] = useState('blue')\n\n  function canSaveNewReminder() {\n    let errorsCount = 0\n\n    if (!description) {\n      setErrorDescription('Description field is mandatory')\n      errorsCount++\n    } else {\n      setErrorDescription('')\n    }\n\n    if (!dateIsValid(date)) {\n      setErrorDate('Please provide a valid date')\n      errorsCount++\n    } else {\n      setErrorDate('')\n    }\n\n    if (!timeIsValid(time)) {\n      setErrorTime('Please provide a valid time')\n      errorsCount++\n    } else {\n      setErrorTime('')\n    }\n\n    if (errorsCount > 0) return false\n    return true\n  }\n\n  function saveNewReminder() {\n    if (!canSaveNewReminder()) return\n    const item = {\n      id: Date.now().toString(),\n      description: description,\n      date: moment(date, 'MM-DD-YYYY').format('YYYY-MM-DD'),\n      time: moment(time, 'HH:mm').format('HH:mm'),\n      theme: theme,\n      city: city\n    }\n    saveNewReminderToLocalStorage(item)\n    closeDialog()\n    window.location.reload(false)\n  }\n\n  return (\n    <>\n      <div className=\"reminder__overlay\"></div>\n      <div className=\"reminder__lightbox\">\n        <header>\n          <h3 className=\"reminder-lightbox__title\">New reminder</h3>\n          <button\n            data-testid=\"NewReminderCloseDialogButton\"\n            onClick={closeDialog}\n            className=\"reminder-lightbox__close-button\"\n          >\n            Close\n          </button>\n        </header>\n        <TextInput\n          name=\"reminder-description\"\n          label=\"Description\"\n          value={description}\n          onChange={setDescription}\n          maxLength={30}\n          errorMessage={errorDescription}\n        />\n\n        <div className=\"reminder-lightbox__datetime-fields\">\n          <TextInput\n            name=\"reminder-time\"\n            label=\"Time\"\n            placeholder=\"Ex.: 21:00\"\n            value={time}\n            onChange={setTime}\n            maxLength={5}\n            errorMessage={errorTime}\n          />\n          <TextInput\n            name=\"reminder-day\"\n            label=\"Day\"\n            placeholder=\"Ex.: 12/31/2020\"\n            value={date}\n            onChange={setDate}\n            maxLength={10}\n            errorMessage={errorDate}\n          />\n        </div>\n\n        <TextInput\n          name=\"reminder-city\"\n          label=\"City\"\n          value={city}\n          onChange={setCity}\n          maxLength={30}\n        />\n\n        <ColorInput value={theme} onSelect={setTheme} />\n        <button\n          className=\"reminder-lightbox__primary-button\"\n          onClick={saveNewReminder}\n          data-testid=\"CreateNewReminderButton\"\n        >\n          Create reminder\n        </button>\n      </div>\n    </>\n  )\n}\n\nNewReminder.propTypes = {\n  closeDialog: func.isRequired\n}\n\nexport default NewReminder\n","import moment from 'moment'\n\nexport function dateIsValid(value) {\n  if (!value) return false\n  const date = moment(value, 'MM/DD/YYYY')\n  if (!date.isValid()) return false\n  return true\n}\n\nexport function timeIsValid(value) {\n  if (!value) return false\n  const time = moment(value, 'HH:mm')\n  if (!time.isValid()) return false\n  return true\n}\n","import React, { useState } from 'react'\nimport { string, func } from 'prop-types'\n\nimport './styles.css'\n\nimport { NewReminder } from 'components/Reminder/'\n\nfunction CalendarHeader({ currentMonth, currentYear, handleMonthChange }) {\n  const [isOpen, setIsOpen] = useState(false)\n  function onNextMonthClick() {\n    handleMonthChange('next')\n  }\n\n  function onPreviousMonthClick() {\n    handleMonthChange('previous')\n  }\n\n  function toggleDialog() {\n    setIsOpen(current => !current)\n  }\n\n  return (\n    <>\n      <div className=\"calendar-title-bar\">\n        <div className=\"calendar-header-info\">\n          <h1\n            className=\"calendar-current-month\"\n            data-testid=\"calendarCurrentMonthLabel\"\n          >\n            {currentMonth}\n          </h1>\n          <h3\n            className=\"calendar-current-year\"\n            data-testid=\"calendarCurrentYearLabel\"\n          >\n            {currentYear}\n          </h3>\n        </div>\n        <div className=\"calendar-navigation\">\n          <button\n            id=\"new-reminder-button\"\n            data-testid=\"calendarNewReminderButton\"\n            onClick={toggleDialog}\n          >\n            Create new reminder\n          </button>\n          <button\n            data-testid=\"calendarPreviousMonthButton\"\n            onClick={onPreviousMonthClick}\n          >\n            Previous month\n          </button>\n          <button\n            data-testid=\"calendarNextMonthButton\"\n            onClick={onNextMonthClick}\n          >\n            Next month\n          </button>\n        </div>\n      </div>\n      <div className=\"calendar-header\">\n        <ul className=\"calendar-header__weekdays\">\n          <li>Sunday</li>\n          <li>Monday</li>\n          <li>Tuesday</li>\n          <li>Wednesday</li>\n          <li>Thursday</li>\n          <li>Friday</li>\n          <li>Saturday</li>\n        </ul>\n      </div>\n      {isOpen && <NewReminder closeDialog={toggleDialog} />}\n    </>\n  )\n}\n\nCalendarHeader.propTypes = {\n  currentMonth: string.isRequired,\n  currentYear: string.isRequired,\n  handleMonthChange: func.isRequired\n}\n\nexport default CalendarHeader\n","import React from 'react'\nimport { string, bool } from 'prop-types'\n\nimport './styles.css'\n\nfunction CalendarDay({\n  day,\n  isToday,\n  isSelected,\n  isWeekend,\n  isNotCurrentMonth,\n  children\n}) {\n  let classNames = ['calendar-body__day']\n  if (isToday) classNames.push('is-today')\n  if (isSelected) classNames.push('is-selected')\n  if (isWeekend) classNames.push('is-weekend')\n  if (isNotCurrentMonth) classNames.push('is-not-current-month')\n\n  return (\n    <li className={classNames.join(' ')}>\n      <span className=\"calendar-day__label\">{day}</span>\n      <div className=\"calendar-day__reminders\">{children}</div>\n    </li>\n  )\n}\n\nCalendarDay.propTypes = {\n  day: string.isRequired,\n  isToday: bool,\n  isSelected: bool,\n  isWeekend: bool,\n  isNotCurrentMonth: bool\n}\n\nCalendarDay.defaultProps = {\n  isToday: false,\n  isSelected: false,\n  isWeekend: false,\n  isNotCurrentMonth: false\n}\n\nexport default CalendarDay\n","export const API_KEY = 'b5217a925aff59ec624a1b3ac76d64a3'\n","import React from 'react'\n\nimport './styles.css'\n\nfunction Loading() {\n  return (\n    <div className=\"loading-icon\">\n      <span></span>\n      <span></span>\n      <span></span>\n    </div>\n  )\n}\n\nexport default Loading\n","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { string } from 'prop-types'\n\nimport './styles.css'\n\nimport { API_KEY } from 'api'\n\nimport EditReminder from 'components/Reminder/EditReminder'\nimport Loading from 'ui/Loading'\n\nfunction ReminderLabel({ id, description, date, time, city, theme }) {\n  const [isOpen, setIsOpen] = useState(false)\n  const [weather, setWeather] = useState(null)\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    async function getWeatherInfo() {\n      if (city) {\n        setLoading(true)\n        try {\n          const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`\n          const response = await axios.get(url)\n          const { data } = response\n          const { weather } = data\n          setWeather(weather[0].description)\n        } catch (e) {\n          console.error(e.message)\n        }\n        setLoading(false)\n      }\n    }\n    getWeatherInfo()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  function openEditCurrentReminder(event) {\n    event.stopPropagation()\n    setIsOpen(true)\n  }\n\n  function closeEditCurrentReminder() {\n    setIsOpen(false)\n  }\n\n  return (\n    <>\n      <div\n        onClick={openEditCurrentReminder}\n        className={`reminder-label theme--${theme}`}\n      >\n        {description}\n        {city && loading ? <Loading /> : null}\n        {weather && (\n          <span>\n            {weather} in {city}\n          </span>\n        )}\n      </div>\n      {isOpen && (\n        <EditReminder\n          id={id}\n          description={description}\n          date={date}\n          time={time}\n          city={city}\n          theme={theme}\n          closeDialog={closeEditCurrentReminder}\n        />\n      )}\n    </>\n  )\n}\n\nReminderLabel.propTypes = {\n  id: string.isRequired,\n  description: string.isRequired,\n  date: string.isRequired,\n  city: string,\n  theme: string.isRequired\n}\n\nReminderLabel.defaultProps = {\n  city: ''\n}\n\nexport default ReminderLabel\n","import React, { useState, useEffect } from 'react'\nimport moment from 'moment'\n\nimport './styles.css'\n\nimport { loadRemindersFromLocalStorage } from 'storage/reminders'\n\nimport CalendarDay from './components/CalendarDay'\nimport ReminderLabel from 'components/ReminderLabel'\n\nfunction CalendarBody({ dates, selectedDay }) {\n  const [reminders, setReminders] = useState([])\n\n  useEffect(() => {\n    const storageInfo = loadRemindersFromLocalStorage()\n    if (storageInfo) setReminders(JSON.parse(storageInfo))\n  }, [])\n\n  function sorting(a, b) {\n    if (a.time < b.time) return -1\n    if (a.time > b.time) return 1\n    return 0\n  }\n\n  return (\n    <div className=\"calendar-body\">\n      {dates.map(week => (\n        <div key={week} className=\"calendar-body__week\">\n          {week.map((day, index) => (\n            <CalendarDay\n              key={day}\n              day={day.format('D')}\n              isSelected={selectedDay.isSame(day, 'day')}\n              isToday={day.isSame(new Date(), 'day')}\n              isWeekend={index === 0 || index === 6}\n              isNotCurrentMonth={!selectedDay.isSame(day, 'month')}\n            >\n              {\n                // eslint-disable-next-line array-callback-return\n                reminders?.sort(sorting).map(reminder => {\n                  if (day.isSame(moment(reminder.date), 'day')) {\n                    return <ReminderLabel key={reminder.id} {...reminder} />\n                  }\n                })\n              }\n            </CalendarDay>\n          ))}\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default CalendarBody\n","import React, { useState, useEffect } from 'react'\n\nimport moment from 'moment'\n\nimport CalendarHeader from './components/CalendarHeader'\nimport CalendarBody from './components/CalendarBody'\n\nimport { mountCalendar } from './Calendar'\n\nfunction Calendar() {\n  const [selectedDay, setSelectedDay] = useState(moment())\n  const [calendar, setCalendar] = useState([])\n\n  useEffect(() => {\n    setCalendar(mountCalendar(selectedDay))\n  }, [selectedDay])\n\n  function handleMonthChange(value) {\n    switch (value) {\n      case 'next':\n        setSelectedDay(selectedDay.clone().add(1, 'month'))\n        break\n      case 'previous':\n        setSelectedDay(selectedDay.clone().subtract(1, 'month'))\n        break\n      default:\n        break\n    }\n  }\n\n  return (\n    <>\n      <CalendarHeader\n        currentMonth={selectedDay.format('MMMM')}\n        currentYear={selectedDay.format('YYYY')}\n        handleMonthChange={handleMonthChange}\n      />\n      <CalendarBody dates={calendar} selectedDay={selectedDay} />\n    </>\n  )\n}\n\nexport default Calendar\n","export function mountCalendar(selectedDate) {\n  const firstDay = selectedDate.clone().startOf('month').startOf('week')\n  const lastDay = selectedDate.clone().endOf('month').endOf('week')\n\n  const date = firstDay.clone().subtract(1, 'day')\n  const calendar = []\n  while (date.isBefore(lastDay, 'day')) {\n    calendar.push(\n      Array(7)\n        .fill(0)\n        .map(() => date.add(1, 'day').clone())\n    )\n  }\n\n  return calendar\n}\n","import React from 'react'\n\nimport './styles/global.css'\n\nimport Calendar from './components/Calendar'\n\nfunction App() {\n  return (\n    <div id=\"app\">\n      <Calendar />\n    </div>\n  )\n}\n\nexport default App\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}